// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "fmt"
import "strconv"

func indexPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Dividend Charts</title><script src=\"https://unpkg.com/htmx.org@1.9.6\"></script><script src=\"https://cdn.tailwindcss.com\"></script><script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script><script>\n        tailwind.config = {\n            theme: {\n                extend: {\n                    colors: {\n                        lavender: {\n                            light: '#E6E6FA',\n                            DEFAULT: '#9370DB',\n                            dark: '#8A2BE2',\n                        },\n                    },\n                },\n            },\n        }\n    </script></head><body class=\"bg-lavender-light min-h-screen flex items-center justify-center\"><div class=\"bg-white bg-opacity-80 p-8 rounded-lg shadow-md w-full max-w-4xl\"><h1 class=\"text-3xl font-bold mb-6 text-center text-lavender-dark\">Dividend Charts</h1><div id=\"charts\" class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\"><div><h2 class=\"text-xl font-semibold mb-2 text-lavender\">Dividend Trends</h2><canvas id=\"trendChart\"></canvas></div><div><h2 class=\"text-xl font-semibold mb-2 text-lavender\">Dividend Comparison</h2><canvas id=\"comparisonChart\"></canvas></div></div><div><h2 class=\"text-xl font-semibold mb-2 text-lavender\">Dividend Data</h2><div id=\"dividendData\" class=\"overflow-x-auto\"><table class=\"min-w-full bg-white bg-opacity-50\"><thead><tr><th class=\"px-4 py-2 bg-lavender text-white\">Symbol</th><th class=\"px-4 py-2 bg-lavender text-white\">Year</th><th class=\"px-4 py-2 bg-lavender text-white\">Dividend</th></tr></thead> <tbody hx-get=\"/api/dividends\" hx-trigger=\"load\" hx-swap=\"innerHTML\"><tr><td colspan=\"3\" class=\"text-center py-4\">Loading...</td></tr></tbody></table></div></div></div><script>\n        document.body.addEventListener('htmx:afterSwap', function (event)\n        {\n            if (event.detail.target.tagName === 'TBODY')\n            {\n                const data = JSON.parse(event.detail.xhr.response);\n                updateCharts(data);\n            }\n        });\n\n        function updateCharts(data)\n        {\n            const symbols = [...new Set(data.map(item => item.Symbol))];\n            const years = [...new Set(data.map(item => item.Year))];\n\n            // Trend Chart\n            const trendCtx = document.getElementById('trendChart').getContext('2d');\n            new Chart(trendCtx, {\n                type: 'line',\n                data: {\n                    labels: years,\n                    datasets: symbols.map(symbol => ({\n                        label: symbol,\n                        data: data.filter(item => item.Symbol === symbol).map(item => item.Dividend),\n                        borderColor: getRandomColor(),\n                        fill: false\n                    }))\n                },\n                options: {\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: 'Dividend Trends'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Dividend ($)'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            position: 'bottom'\n                        }\n                    }\n                }\n            });\n\n            // Comparison Chart\n            const comparisonCtx = document.getElementById('comparisonChart').getContext('2d');\n            new Chart(comparisonCtx, {\n                type: 'bar',\n                data: {\n                    labels: symbols,\n                    datasets: years.map(year => ({\n                        label: year.toString(),\n                        data: symbols.map(symbol =>\n                        {\n                            const item = data.find(d => d.Symbol === symbol && d.Year === year);\n                            return item ? item.Dividend : 0;\n                        }),\n                        backgroundColor: getRandomColor(0.6)\n                    }))\n                },\n                options: {\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: 'Dividend Comparison'\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: 'Dividend ($)'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            position: 'bottom'\n                        }\n                    }\n                }\n            });\n        }\n\n        function getRandomColor(opacity = 1)\n        {\n            const r = Math.floor(Math.random() * 256);\n            const g = Math.floor(Math.random() * 256);\n            const b = Math.floor(Math.random() * 256);\n            return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n        }\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func dividendRows(data []DividendData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for _, item := range data {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<tr class=\"hover:bg-lavender-light\"><td class=\"border px-4 py-2\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(item.Symbol)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates.templ`, Line: 177, Col: 46}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</td><td class=\"border px-4 py-2\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(item.Year))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates.templ`, Line: 178, Col: 58}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</td><td class=\"border px-4 py-2\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("$%.2f", item.Dividend))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates.templ`, Line: 179, Col: 70}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</td></tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
